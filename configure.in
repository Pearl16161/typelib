dnl autoconf script for the simulation system built on top of pocolibs
dnl
dnl Copyright (c) 2004 
dnl      Autonomous Systems Lab, Swiss Federal Institute of Technology.
dnl Copyright (c) 2003-2004 CNRS/LAAS
dnl
dnl GPL, since some parts were copied from other configure.in
dnl 
dnl $LAAS: configure.in,v 1.26 2004/09/14 11:01:03 mallet Exp $
dnl
AC_INIT(Makefile.in)
AC_PREREQ(2.13)

AC_CANONICAL_HOST

AC_PROG_CC
AC_PROG_CXX
if test "x${GCC}" = "xyes"; then
  CFLAGS="${CFLAGS} -Wall"
fi

PACKAGE=pocosim
VERSION=1.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl add -ldl if needed 
if test -n "$lt_cv_dlopen_libs" ; then
	LIBS=$lt_cv_dlopen_libs
fi

AC_PROG_INSTALL

dnl **********************************************************************************************************
dnl Check for mkdep (dependency generator)
AC_PATH_PROG(MKDEP, mkdep, no, $prefix/bin:$exec_prefix/bin:$PATH)
if [ test "x$MKDEP" = "xno" ]; then
  AC_MSG_ERROR([mkdep is needed to build pocosim])
fi

dnl processor tests 
AC_C_BIGENDIAN

dnl **********************************************************************************************************
dnl Check for external dependencies

dnl ---- ANTLR
AC_CHECK_TOOL(ANTLR, [antlr runantlr cantlr], true)

AC_ARG_WITH(antlr, 
            [AC_HELP_STRING([--with-antlr=DIR], [antlr prefix is DIR])],
            [antlr_prefix=$withval], [antlr_prefix=/usr/local])

if test "x$antlr_prefix" != "x"; then
    ANTLR_CFLAGS="-I$antlr_prefix/include"
    ANTLR_LIBS="-L$antlr_prefix/lib"
fi
ANTLR_LIBS="$ANTLR_LIBS -lantlr"

INCLUDES=$ANTLR_CFLAGS
AC_LANG_PUSH(C++)
antlr_save_CPPFLAGS=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $ANTLR_CFLAGS"
AC_CHECK_HEADERS(
    [ antlr/Token.hpp antlr/String.hpp  ],
    [ antlr_found=1; break ])
CPPFLAGS=$antlr_save_CPPFLAGS
AC_LANG_POP(C++)

if test "x$antlr_found" != "x1"; then
    AC_MSG_ERROR([Antlr not found, please check your installation])
fi

AC_SUBST(ANTLR_CFLAGS)
AC_SUBST(ANTLR_LIBS)

dnl ---- libxml2
PKG_CHECK_MODULES(LIBXML, libxml-2.0,, [AC_MSG_ERROR([libxml2 is needed to build])])

dnl *********************************************************************
dnl Precompiled headers (gcc 3.4 only)
AC_ARG_WITH(pch,
           AC_HELP_STRING([--with-pch=header.h], [use precompiled headers]),
                [pch=$withval],[pch=no])
if ! test "x$pch" = "xno"; then
    USE_PCH=1
    PCH_HEADER=$pch

    AC_MSG_RESULT(using $pch as precompiled header)
fi
AC_SUBST(USE_PCH)
AC_SUBST(PCH_HEADER)


dnl *********************************************************************
dnl Debugging options 
AC_ARG_ENABLE(debug,
           [AC_HELP_STRING([--enable-debug=full yes no], [compile with debug info])],
                [debug=$enableval],[debug=yes])
if test "x$debug" = "xfull"; then
    CFLAGS="${CFLAGS} -g3 -O0 -DDEBUG"
    CXXFLAGS="${CFLAGS}"
    AC_MSG_RESULT([building with full debug info: -g3 -O0])
elif test "x$debug" = "xyes"; then
    CFLAGS="${CFLAGS} -g -O1 -DDEBUG"
    CXXFLAGS="${CFLAGS}"
    AC_MSG_RESULT([building with debug info: -g -O1])
elif test "x$debug" = "xno"; then
    CFLAGS="${CFLAGS} -O3 -DNDEBUG"
    CXXFLAGS="${CFLAGS} -O3 -finline-functions"
    AC_MSG_RESULT([building without debug mode: -g -O2])
fi

dnl *********************************************************************
dnl Make makefiles

AC_CONFIG_FILES(
    Init.make
	  Makefile
    typelib/Makefile
    genotype/Makefile
)
AC_OUTPUT

