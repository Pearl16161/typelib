int h2RecordErrMsgs(char *bywho, char *moduleName, short moduleId, 
		    int nbErrors, const int errMsgs[]);

struct A
{
    long long a;
    int  b;
    char  c;
    short d;
};

typedef struct A ADef;
typedef int array_typedef[256];
typedef int multi_array_typedef[256][512];

typedef struct Recursive {
    struct Recursive* next;
} Recursive;

typedef struct B
{
    ADef  a;
    float c[100];
    float d[(1)];
    float e[(2-1)];
    float f[(2+1)];
    float g[4/2];
    struct A h[(1+3)*2>>1];
    float i[10][20];
} B;

typedef enum E {
    E_FIRST,
    E_SECOND,
    E_SET = -1,
    E_PARENS = (-2),
    E_HEX = 0xFF,
    E_OCT = 07,
    LAST,
    E_FROM_SYMBOL = E_FIRST + E_HEX,
    E_FROM_SIZEOF_STD = sizeof(int32_t),
    E_FROM_SIZEOF_SPEC = sizeof(B)
} E;

typedef struct EContainer
{
    E value;
} EContainer;

typedef enum INPUT_OUTPUT_MODE {
    OUTPUT, BOTH
} INPUT_OUTPUT_MODE;

typedef enum {
    ANONYMOUS_ENUM_OK
} ANONYMOUS_ENUM, *ANONYMOUS_ENUM_PTR;

typedef void* OpaqueType;

void ignore_functions();

typedef struct {
    int field;
    float value;
} DEFINE_STR, *DEFINE_ID;

typedef struct TEST_ENUM_FIELDS {
    INPUT_OUTPUT_MODE mode;
    enum INPUT_OUTPUT_MODE mode_enum;
    ANONYMOUS_ENUM anonymous_enum;
} TEST_ENUM_FIELDS;


typedef struct DisplayTest {
    int fields[4];
    float f;
    double d;
    ADef a;
    INPUT_OUTPUT_MODE mode;
} DisplayTest;

typedef struct TestMultiDimArray {
    int fields[10][10];
} TestMultiDimArray;

typedef struct TestMemoryManagement {
    struct B b[10][10];
} TestMemoryManagement;


namespace NS1 {
    namespace NS2 {
	struct Test {
	    int a;
	};
    }
}

namespace NS1 {
    namespace Bla {
	struct Test { 
	    char a;
	};
    }

    struct Test { 
	short a;
#ifndef VALID_STRICT_C
	NS1::Bla::Test b;
#endif
    };
}

#ifndef VALID_STRICT_C
namespace NS1 {
    namespace NS1_1 {
	struct Foo {
	    int a;
	    short b;
	};
    }

    namespace NS1_2 {
	typedef NS1_1::Foo Foo;
    }

    struct Foo {
	NS1_1::Foo test;
    };
}
#endif
