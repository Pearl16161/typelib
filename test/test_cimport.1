
struct A
{
    long  a;
    long  b;
    char  c;
    short d;
};

typedef struct A ADef;

typedef struct B
{
    ADef  a;
    float c[100];
    float d[(1)];
    float e[(2-1)];
    float f[(2+1)];
    float g[4/2];
    struct A h[(1+3)*2>>1];
    float i[10][20];
} B;

typedef enum E {
    E_FIRST,
    E_SECOND,
    E_SET = -1,
    E_PARENS = (-2),
    E_HEX = 0xFF,
    E_OCT = 07,
    LAST
} E;

typedef struct EContainer
{
    E value;
} EContainer;

typedef enum INPUT_OUTPUT_MODE {
    OUTPUT, BOTH
} INPUT_OUTPUT_MODE;

typedef enum {
    ANONYMOUS_ENUM_OK
} ANONYMOUS_ENUM;

typedef void* OpaqueType;

void ignore_functions();

typedef struct {
    int field;
    float value;
} DEFINE_STR, *DEFINE_ID;

typedef struct TEST_ENUM_FIELDS {
    INPUT_OUTPUT_MODE mode;
    enum INPUT_OUTPUT_MODE mode_enum;
    ANONYMOUS_ENUM anonymous_enum;
} TEST_ENUM_FIELDS;


typedef struct DisplayTest {
    int fields[4];
    float f;
    double d;
    ADef a;
    INPUT_OUTPUT_MODE mode;
} DisplayTest;

typedef struct TestMultiDimArray {
    int fields[10][10];
} TestMultiDimArray;

